parameters:
    fixtures:
        account_password: '%env(FIXTURES_ACCOUNTPASSWORD)%'

    # set this param to a higher value than session_expire_seconds on the client
    user_provider_timeout_seconds: 3901
    client_permissions:
        admin: [ROLE_AD, ROLE_ADMIN]
        frontend: [ROLE_DEPUTY]

    shared_email_domains:
        - 'aol.com'
        - 'aol.co.uk'
        - 'btconnect.com'
        - 'btinternet.com'
        - 'gmail.com'
        - 'googlemail.com'
        - 'hotmail.com'
        - 'hotmail.co.uk'
        - 'icloud.com'
        - 'live.co.uk'
        - 'live.com'
        - 'mac.com'
        - 'me.com'
        - 'msn.com'
        - 'nhs.net'
        - 'ntlworld.com'
        - 'outlook.com'
        - 'sky.com'
        - 'talktalk.net'
        - 'yahoo.com'
        - 'yahoo.co.uk'
        - 'example.com'

services:
    em:
        alias: doctrine.orm.entity_manager

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $fixturesEnabled: "%env(bool:FIXTURES_ENABLED)%"
            $yamlFixtureLocation: "%kernel.root_dir%/src/DataFixtures/"
            $fixtureParams: '%fixtures%'
            $symfonyEnvironment: "%kernel.environment%"
            $rootDir: "%kernel.root_dir%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    App\Controller\:
        resource: '../src/Controller/'
        tags: [controller.service_arguments]

    App\v2\Controller\:
        resource: '../src/v2/Controller'
        tags: [controller.service_arguments]

    App\v2\Registration\Controller\:
        resource: '../src/v2/Registration/Controller'
        tags: [controller.service_arguments]

    Doctrine\Migrations\Version\DbalMigrationFactory: ~
    App\Migrations\Factory\MigrationFactoryDecorator:
        decorates: Doctrine\Migrations\Version\DbalMigrationFactory
        arguments: ['@App\Migrations\Factory\MigrationFactoryDecorator.inner', '@service_container']


    monolog.processor.add_request_id:
        class: App\Service\RequestIdLoggerProcessor
        arguments:  [ "@service_container" ]
        tags:
            - { name: monolog.processor, method: processRecord }

    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    App\DataFixtures\:
        resource: '../src/DataFixtures'
        tags: ['doctrine.fixture.orm']
        autowire: true

    App\Controller\Report\ReportController:
        class: App\Controller\Report\ReportController
        arguments:
            $updateHandlers: [
                '@rest_handler.report.deputy_costs_estimate_report_update_handler',
                '@rest_handler.report.deputy_costs_report_update_handler',
                '@rest_handler.report.pa_fees_expenses_report_update_handler'
            ]

    App\EventListener\RestInputOuputFormatter:
        arguments: [ "@jms_serializer", "@logger", ["json"], "json", "%kernel.debug%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.view, method: onKernelView }
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\DoctrineListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist, method: prePersist }
            - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }
            - { name: doctrine.event_listener, event: preRemove, method: preRemove }

    App\EventListener\FixDefaultSchemaListener:
        class: App\EventListener\FixDefaultSchemaListener
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema, method: postGenerateSchema }

    App\Factory\OrganisationFactory:
        class: App\Factory\OrganisationFactory
        arguments: ['%shared_email_domains%']

    App\Service\RestHandler\OrganisationRestHandler:
        class: App\Service\RestHandler\OrganisationRestHandler
        arguments:
            - '@em'
            - '@validator'
            - '@App\Repository\OrganisationRepository'
            - '@App\Repository\UserRepository'
            - '@App\Factory\OrganisationFactory'
            - '%shared_email_domains%'

    App\Service\Auth\UserProvider:
        arguments: [ '@em', "@snc_redis.default", "@logger", { "timeout_seconds": "%user_provider_timeout_seconds%" }, '@App\Repository\UserRepository' ]

    App\Security\OrganisationVoter:
        class: App\Security\OrganisationVoter
        arguments: [ "@security.helper" ]
        tags:
            - { name: security.voter }

    App\Security\ClientVoter:
        class: App\Security\ClientVoter
        arguments: [ "@security.helper" ]
        tags:
            - { name: security.voter }

    App\Security\UserVoter:
        class: App\Security\UserVoter
        tags:
            - { name: security.voter }

    #Â Disable autowiring for these helper classes
    App\Service\ReportStatusService: ~
    App\Service\Stats\StatsQueryParameters: ~

    Symfony\Component\Security\Core\Role\RoleHierarchyInterface: '@security.role_hierarchy'

    App\Repository\CasRecRepository:
        class: App\Repository\CasRecRepository
        tags: ['doctrine.repository_service']

    App\Repository\ClientContactRepository:
        class: App\Repository\ClientContactRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\ClientRepository:
        class: App\Repository\ClientRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\DocumentRepository:
        class: App\Repository\DocumentRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\NamedDeputyRepository:
        class: App\Repository\NamedDeputyRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\NdrRepository:
        class: App\Repository\NdrRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\NoteRepository:
        class: App\Repository\NoteRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\OrganisationRepository:
        class: App\Repository\OrganisationRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\ReportRepository:
        class: App\Repository\ReportRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\ReportSubmissionRepository:
        class: App\Repository\ReportSubmissionRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\SatisfactionRepository:
        class: App\Repository\SatisfactionRepository
        tags: [ 'doctrine.repository_service' ]

    App\Repository\UserRepository:
        class: App\Repository\UserRepository
        tags: ['doctrine.repository_service']

    App\Repository\UserResearchResponseRepository:
        class: App\Repository\UserResearchResponseRepository
        tags: ['doctrine.repository_service']

    App\Service\Auth\AuthService:
        arguments:
            $encoderFactory: '@security.encoder_factory'
            $logger: '@logger'
            $userRepository: '@App\Repository\UserRepository'
            $roleHierarchy: '@security.role_hierarchy'
            $clientPermissions: '%client_permissions%'

    App\Service\BruteForce\AttemptsInTimeChecker:
        arguments: [ "@snc_redis.default" ]
        calls:
            - [ setRedisPrefix, ["ac_ret_code"] ]
            # after 5 attempts in the last 10 minutes, return a different return code (activate captcha)
            - [ addTrigger, [  5, 600 ] ]

    App\Service\BruteForce\AttemptsIncrementalWaitingChecker:
        arguments: [ "@snc_redis.default" ]
        calls:
            - [ setRedisPrefix, ["ac_exception"] ]
            # after 10 attempts, freeze for 30 minutes
            - [ addFreezingRule, [  10, 1800 ] ]
            # after further 10 attempts. freeze for 1h
            - [ addFreezingRule, [  20, 3600 ] ]
            # after further 10 attempts. freeze for 2h
            - [ addFreezingRule, [  30, 7200 ] ]

    logstash_formatter:
        class: Monolog\Formatter\LogstashFormatter
        arguments:
        - application.api
        - null
        - null
        - ""
        - 1
    line_formatter:
        class: Monolog\Formatter\LineFormatter

    rest_handler.report.deputy_costs_estimate_report_update_handler:
        class: App\Service\RestHandler\Report\DeputyCostsEstimateReportUpdateHandler
        arguments: [ '@em' ]

    rest_handler.report.deputy_costs_report_update_handler:
        class: App\Service\RestHandler\Report\DeputyCostsReportUpdateHandler
        arguments: [ '@em' ]

    rest_handler.report.pa_fees_expenses_report_update_handler:
        class: App\Service\RestHandler\Report\PaFeesExpensesReportUpdateHandler
        arguments: [ '@em' ]

    PlainDeputyAssembler:
        class: App\v2\Assembler\DeputyAssembler

    App\v2\Assembler\Report\ReportSummaryAssembler: ~
    App\v2\Assembler\Report\ReportAssemblerInterface: '@App\v2\Assembler\Report\ReportSummaryAssembler'

    PlainOrganisationAssembler:
        class: App\v2\Assembler\OrganisationAssembler

    App\v2\Registration\Assembler\CasRecToLayDeputyshipDtoAssembler: ~
    App\v2\Registration\Assembler\LayDeputyshipDtoAssemblerInterface: '@App\v2\Registration\Assembler\CasRecToLayDeputyshipDtoAssembler'

    uuid_normalizer:
        class: GBProd\UuidNormalizer\UuidNormalizer
        tags:
            - { name: serializer.normalizer }

    uuid_denormalizer:
        class: GBProd\UuidNormalizer\UuidDenormalizer
        tags:
            - { name: serializer.denormalizer }
