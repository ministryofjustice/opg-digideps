name: "[Docker] Build and Push Images"

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Name of the branch doing the build"
        required: true
        type: string
      tag:
        description: "Tag for docker image"
        required: false
        default: "latest"
        type: string
      push_to_ecr:
        description: "Whether to push to ECR"
        required: false
        default: true
        type: boolean

jobs:
  docker_build_scan_push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - svc_name: "client-webserver"
            sub_folder: "."
            docker_file: "client/docker/web/Dockerfile"
          - svc_name: "client"
            sub_folder: "."
            docker_file: "client/docker/app/Dockerfile"
          - svc_name: "api-webserver"
            sub_folder: "."
            docker_file: "api/docker/web/Dockerfile"
          - svc_name: "api"
            sub_folder: "."
            docker_file: "api/docker/app/Dockerfile"
          - svc_name: "sync"
            sub_folder: "orchestration"
            docker_file: "Dockerfile"
          - svc_name: "htmltopdf"
            sub_folder: "."
            docker_file: "htmltopdf/Dockerfile"
          - svc_name: "file-scanner"
            sub_folder: "."
            docker_file: "file-scanner/Dockerfile"
          - svc_name: "dr-backup"
            sub_folder: "disaster-recovery/backup"
            docker_file: "Dockerfile"
          - svc_name: "custom-sql-lambda"
            sub_folder: "lambdas/functions/custom_sql_query"
            docker_file: "Dockerfile"
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # pin@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: set up docker buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca
        id: buildx_setup
        with:
          version: v0.15.1
          platforms: linux/amd64,linux/arm64

      - name: export dates
        id: cache-dates
        run: |
          echo "cache_date_today=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "cache_date_yesterday=$(date -d 'yesterday' +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: cache docker layers
        id: cache-docker
        uses: actions/cache@36f1e144e1c8edb0a652766b484448563d8baf46 # pin@v3.0.8
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.svc_name }}-${{ inputs.branch_name }}-${{ steps.cache-dates.outputs.cache_date_today }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.svc_name }}-${{ inputs.branch_name }}-${{ steps.cache-dates.outputs.cache_date_today }}
            ${{ matrix.svc_name }}-main-${{ steps.cache-dates.outputs.cache_date_today }}
            ${{ matrix.svc_name }}-${{ inputs.branch_name }}-${{ steps.cache-dates.outputs.cache_date_yesterday }}
            ${{ matrix.svc_name }}-main-${{ steps.cache-dates.outputs.cache_date_yesterday }}

      - name: install aws cli
        uses: unfor19/install-aws-cli-action@27d6061dae5d39e89be4d2246824f15e111a7e06 # pin@v1.0.3

      - name: download resources artifact
        uses: actions/download-artifact@7fba95161a0924506ed1ae69cdbae8371ee00b3f
        with:
          name: web-distribution
          path: client/resources/public
        if: |
          (matrix.svc_name == 'client' || matrix.svc_name == 'client-webserver' || matrix.svc_name == 'htmltopdf')

      - name: build docker image
        env:
          IMAGE_NAME: ${{ matrix.svc_name }}
          DOCKERFILE: ${{ matrix.docker_file }}
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          if [ "${BRANCH_NAME}" == "main" ]; then
            docker buildx build \
            -f ${DOCKERFILE} \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --platform linux/amd64,linux/arm64 \
            --tag ${IMAGE_NAME}:latest \
            --output type=docker \
            .
          else
            docker buildx build \
            -f ${DOCKERFILE} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --platform linux/amd64,linux/arm64 \
            --tag ${IMAGE_NAME}:latest \
            --output type=docker \
            .
          fi
        working-directory: ${{ matrix.sub_folder }}

      - name: build docker image development
        if: matrix.svc_name == 'client-webserver' && inputs.branch_name == 'main'
        env:
          IMAGE_NAME: ${{ matrix.svc_name }}
          DOCKERFILE: ${{ matrix.docker_file }}
        run: docker build --file client/docker/app/Dockerfile-dev --tag ${IMAGE_NAME}-dev:latest .
        working-directory: ${{ matrix.sub_folder }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: trivy image scanning
        id: trivy_scan
        uses: aquasecurity/trivy-action@a11da62073708815958ea6d84f5650c78a3ef85b # pin@v0.7.1
        with:
          image-ref: ${{ matrix.svc_name }}:latest
          severity: "HIGH,CRITICAL"
          format: "sarif"
          scanners: "vuln"
          output: "trivy-results.sarif"
          timeout: 15m
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db

      - name: upload trivy scan results to security tab
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: show build tag
        env:
          IMAGE_TAG: ${{ inputs.tag }}
        run: echo "Tag to use - ${IMAGE_TAG}"

      - name: tag and push user research development container
        if: matrix.svc_name == 'client-webserver' && inputs.branch_name == 'main'
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: digideps
          IMAGE_TAG: ${{ inputs.tag }}
          IMAGE_NAME: ${{ matrix.svc_name }}
        run: |
          export IMAGE_TAG_DEV="development-${IMAGE_TAG}"
          docker tag $IMAGE_NAME-dev:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:$IMAGE_TAG_DEV

      - name: tag and push container
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: digideps
          IMAGE_TAG: ${{ inputs.tag }}
          IMAGE_NAME: ${{ matrix.svc_name }}
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:$IMAGE_TAG
          if [[ "${BRANCH_NAME}" == "main" ]]; then
            docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:latest
            docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:main-$IMAGE_TAG
          fi
          docker push --all-tags $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME

      - name: Unset AWS variables
        if: always()
        run: |
          echo "AWS_SECRET_ACCESS_KEY=" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=" >> $GITHUB_ENV
