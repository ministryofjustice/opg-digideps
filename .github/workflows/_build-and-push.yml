name: "[Docker] Build and Push Images"

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Name of the branch doing the build"
        required: true
        type: string
      tag:
        description: "Tag for docker image"
        required: false
        default: "latest"
        type: string
      push_to_ecr:
        description: "Whether to push to ECR"
        required: false
        default: "true"
        type: string

jobs:
  docker_build_scan_push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - svc_name: "client"
            sub_folder: "client"
          - svc_name: "api"
            sub_folder: "api"
          - svc_name: "sync"
            sub_folder: "sync"
          - svc_name: "htmltopdf"
            sub_folder: "htmltopdf"
          - svc_name: "file-scanner"
            sub_folder: "file-scanner"
          - svc_name: "dr-backup"
            sub_folder: "disaster-recovery/backup"
          - svc_name: "synchronise-lambda"
            sub_folder: "lambdas/functions/synchronisation"
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # pin@v3

      - name: set up docker buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - name: cache docker layers
        id: cache-docker
        uses: actions/cache@365406cb701e1cc758077b05049298a49a8b71c2 # pin@v3.0.8
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.svc_name }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.svc_name }}-build

      - name: install aws cli
        uses: unfor19/install-aws-cli-action@35a9630be0168293ad2afccbe06e8e9f47678d2c # pin@v1.0.3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # pin@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/digideps-ci
          role-duration-seconds: 1800
          role-session-name: OPGDigidepsECRGithubAction

      - name: build docker image
        env:
          IMAGE_NAME: ${{ matrix.svc_name }}
        run: docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache-new --tag ${IMAGE_NAME}:latest --output type=docker .
        working-directory: ${{ matrix.sub_folder }}

      - name: build docker image development
        if: matrix.svc_name == 'client' && inputs.branch_name == 'main'
        env:
          IMAGE_NAME: ${{ matrix.svc_name }}
        run: docker build --tag ${IMAGE_NAME}-dev:latest --file Dockerfile-dev .
        working-directory: ${{ matrix.sub_folder }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: trivy image scanning
        id: trivy_scan
        uses: aquasecurity/trivy-action@1a09192c0ea4a3f42a25d6ebc3abc423c2601f1a # pin@v0.7.1
        with:
          image-ref: ${{ matrix.svc_name }}:latest
          severity: "HIGH,CRITICAL"
          format: "sarif"
          security-checks: "vuln"
          output: "trivy-results.sarif"
          timeout: 15m

      - name: upload trivy scan results to security tab
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: ecr login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f # pin@v1.5.1
        with:
          registries: 311462405659

      - name: show build tag
        env:
          IMAGE_TAG: ${{ inputs.tag }}
        run: echo "Tag to use - ${IMAGE_TAG}"

      - name: tag and push user research development container
        if: matrix.svc_name == 'client' && inputs.branch_name == 'main'
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: digideps
          IMAGE_TAG: ${{ inputs.tag }}
          IMAGE_NAME: ${{ matrix.svc_name }}
        run: |
          export IMAGE_TAG_DEV="development-$(echo $IMAGE_TAG | awk -F'-' '{print $2}')"
          docker tag $IMAGE_NAME-dev:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:$IMAGE_TAG_DEV

      - name: tag and push container
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: digideps
          IMAGE_TAG: ${{ inputs.tag }}
          IMAGE_NAME: ${{ matrix.svc_name }}
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:$IMAGE_TAG
          if [[ "${BRANCH_NAME}" == "main" ]]; then
            docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:latest
          fi
          docker push --all-tags $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME
