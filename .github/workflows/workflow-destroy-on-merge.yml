name: "[Workflow] Destroy ephemeral environment"

permissions:
  contents: read
  security-events: none
  pull-requests: write
  actions: none
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none

defaults:
  run:
    shell: bash

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  workspace_name:
    runs-on: ubuntu-latest
    name: output workflow variables
    outputs:
      build_identifier: ${{ steps.variables.outputs.build_identifier }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v3
      - name: extract variables for workflow
        id: variables
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          export BRANCH=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF##*/}} | awk -F'_' '{print $1}' | tr -cd '[:alnum:]' | tr '[:upper:]' '[:lower:]' | cut -c1-8)
          echo "build_identifier=$(echo ${BRANCH}${PR_NUMBER})" >> $GITHUB_OUTPUT

  cleanup_workspace:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs:
      - workspace_name
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: parse terraform version
        id: tf_version_setup
        run: |
          if [ -f ./versions.tf ]; then
            terraform_version=$(cat ./versions.tf | ../../scripts/pipeline/terraform/terraform-version.sh)
            echo "- Terraform version: [${terraform_version}]" >> $GITHUB_STEP_SUMMARY
            echo "TERRAFORM_VERSION=${terraform_version}" >> $GITHUB_OUTPUT
          fi
        working-directory: terraform/environment

      - name: "Terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"
        run: echo "terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"

      - uses: hashicorp/setup-terraform@1b93182764c8332e7679b2393cb307cbe7baf9dc # pin@v2
        with:
          terraform_version: ${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - uses: webfactory/ssh-agent@fd34b8dee206fe74b288a5e61bc95fba2f1911eb # pin@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_ALLOW_LIST_REPOSITORY }}

      - name: configure AWS credentials for terraform
        uses: aws-actions/configure-aws-credentials@07a8ea5f5a58f22f4642804e89c969ee6bb1b57a # pin@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGDigidepsDestroyEnvironment

      - name: clean up environment
        working-directory: ./terraform/environment
        env:
          WORKSPACE: ${{ needs.workspace_name.outputs.build_identifier }}
          TF_VAR_OPG_DOCKER_TAG: foo
        run: |
          echo "Running script against ${WORKSPACE}"
          ./scripts/destroy_workspace.sh ${WORKSPACE}
