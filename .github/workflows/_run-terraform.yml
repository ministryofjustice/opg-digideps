on:
  workflow_call:
    inputs:
      terraform_path:
        description: "The name of the terraform path"
        required: true
        type: string
      workspace:
        description: "Terraform workspace"
        required: true
        type: string
      container_version:
        description: "Image tag to use"
        required: false
        type: string
        default: ""
      apply:
        description: "Whether to apply terraform"
        required: false
        type: string
        default: "false"

jobs:
  terraform_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@96f53100ba2a5449eb71d2e6604bbcd94b9449b5 # pin@v3
        with:
          fetch-depth: "0"

      - uses: unfor19/install-aws-cli-action@46282f151073130d90347412d9c4ef0640177f22 # pin@v1.0.3

      - name: build redeployer
        if: inputs.terraform_path == 'account'
        run: GOARCH=amd64 GOOS=linux go build -o bootstrap ./main.go
        working-directory: account/go_redeployer

      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1
        if: inputs.terraform_path == 'shared'
        with:
          python-version: "3.11"

      - name: python layers folder
        if: inputs.terraform_path == 'account'
        run: pip3 install -r requirements.txt --target ./layers/python/lib/python3.11/site-packages/
        working-directory: lambdas/functions/slack_lambda

      - name: parse terraform version
        id: tf_version_setup
        run: |
          if [ -f ./versions.tf ]; then
            terraform_version=$(cat ./versions.tf | ../scripts/pipeline/terraform/terraform-version.sh)
            echo "- Terraform version: [${terraform_version}]" >> $GITHUB_STEP_SUMMARY
            echo "TERRAFORM_VERSION=${terraform_version}" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.terraform_path }}

      - name: "Terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"
        run: echo "terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"

      - uses: hashicorp/setup-terraform@e192cfcbae6c6ed207c277ed7624131996c9bf13 # pin@v2.0.0
        with:
          terraform_version: ${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: configure AWS credentials for terraform
        uses: aws-actions/configure-aws-credentials@35d8f9588bf190a9a7fda3411cd548fb8234bee2 # pin@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-duration-seconds: 1800
          role-session-name: OPGDigidepsTerraformGithubAction

      - uses: webfactory/ssh-agent@d4b9b8ff72958532804b70bbe600ad43b36d5f2e # pin@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_ALLOW_LIST_REPOSITORY }}

      - name: terraform init for account
        if: inputs.terraform_path == 'account'
        run: terraform init -input=false
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        working-directory: ${{ inputs.terraform_path }}

      - name: terraform init for environment
        run: terraform init -input=false
        if: inputs.terraform_path == 'environment'
        working-directory: ${{ inputs.terraform_path }}

      - name: terraform plan ${{ inputs.terraform_path }}
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_OPG_DOCKER_TAG: ${{ inputs.container_version }}
        run: |
          terraform workspace show
          terraform plan -input=false -parallelism=30 -lock-timeout=5m
        working-directory: ${{ inputs.terraform_path }}

      - name: install workspace manager
        if: inputs.apply == 'true' && inputs.terraform_path == 'environment'
        run: |
          wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.1/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
          sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
          sudo chmod +x /usr/local/bin/terraform-workspace-manager

      - name: protect workspace
        if: inputs.apply == 'true' && inputs.terraform_path == 'environment'
        run: terraform-workspace-manager -register-workspace=$TF_WORKSPACE -time-to-protect="${PROTECT_TIME}" -aws-account-id=248804316466 -aws-iam-role=digideps-ci
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          PROTECT_TIME: 3
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}

      - name: terraform apply ${{ inputs.terraform_path }}
        if: inputs.apply == 'true'
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_OPG_DOCKER_TAG: ${{ inputs.container_version }}
          CI: true
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: ${{ inputs.terraform_path }}
