on:
  workflow_call:
    secrets:
      ssh_private_key:
        required: true
    inputs:
      terraform_path:
        description: "The name of the terraform path"
        required: true
        type: string
      workspace:
        description: "Terraform workspace"
        required: true
        type: string
      container_version:
        description: "Image tag to use"
        required: false
        type: string
        default: ""
      apply:
        description: "Whether to apply terraform"
        required: false
        type: boolean
        default: false
      pull_request_path:
        description: "Called from pull request"
        required: false
        type: boolean
        default: false
      account_name:
        required: true
        type: string
        description: "Account to get credentials for"

jobs:
  terraform_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # v1

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # 6.0.0
        if: inputs.terraform_path == 'shared'
        with:
          python-version: "3.11"

      - name: python layers folder
        if: inputs.terraform_path == 'account'
        run: pip3 install -r requirements.txt --target ./layers/python/lib/python3.11/site-packages/
        working-directory: lambdas/functions/monitor_notify_lambda

      - id: terraform_version
        name: get terraform version
        uses: ministryofjustice/opg-github-actions/actions/terraform-version@4f345be3f706950d1fdc05bc86383967a149bd99 # v4.3.4
        with:
          terraform_directory: terraform/${{ inputs.terraform_path }}

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.terraform_version.outputs.version }}
          terraform_wrapper: false

      - name: build redeployer
        if: inputs.terraform_path == 'account'
        run: GOARCH=amd64 GOOS=linux go build -o bootstrap ./main.go
        working-directory: terraform/account/region/go_redeployer

      - id: terraform_workspace_manager
        if: inputs.apply && inputs.terraform_path == 'environment' && inputs.pull_request_path
        name: register workspace
        uses: ministryofjustice/opg-github-actions/actions/terraform-workspace-manager@4f345be3f706950d1fdc05bc86383967a149bd99 # v4.3.4
        with:
          aws_account_id: 248804316466
          aws_iam_role: digideps-ci
          register_workspace: ${{ inputs.workspace }}
          time_to_protect: 3
          oidc_role: arn:aws:iam::248804316466:role/digideps-gh-actions-workspace-cleanup
          assume_role: false

      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}

      - name: configure OIDC AWS credentials for terraform
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: "arn:aws:iam::631181914621:role/oidc-digideps-${{ inputs.account_name }}"
          role-session-name: github-actions-terraform
          role-duration-seconds: 7400
          aws-region: eu-west-1

      - name: terraform init for account
        if: inputs.terraform_path == 'account'
        run: terraform init -input=false
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: terraform init for environment
        run: terraform init -input=false
        if: inputs.terraform_path == 'environment'
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: terraform plan ${{ inputs.terraform_path }}
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_OPG_DOCKER_TAG: ${{ inputs.container_version }}
        run: |
          terraform workspace show
          terraform plan -input=false -parallelism=30 -lock-timeout=5m
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: terraform apply ${{ inputs.terraform_path }}
        if: inputs.apply
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_OPG_DOCKER_TAG: ${{ inputs.container_version }}
          CI: true
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: Unset AWS variables
        if: always()
        run: |
          echo "AWS_SECRET_ACCESS_KEY=" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=" >> $GITHUB_ENV
