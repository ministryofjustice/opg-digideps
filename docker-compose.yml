version: "3.2"

## Define all volumes in docker-compose.override.yml so this file can be used in CI
services:
  resources:
    image: opg-digideps-resources
    build:
      context: .
      dockerfile: ./client/docker/resources/Dockerfile
    environment:
      NODE_ENV: production
    entrypoint: >
      sh -c "npm run build"

  load-balancer:
    container_name: opg-digideps-loadbalancer
    build:
      context: local-resources/local-load-balancer
    depends_on:
      - frontend-webserver
      - admin-webserver
    ports:
      - 443:443

  frontend-webserver:
    container_name: opg-digideps-frontend-webserver
    build:
      context: .
      dockerfile: ./client/docker/web/Dockerfile
    ports:
      - 8070:80
    depends_on:
      - frontend-app
    environment:
      APP_HOST: frontend-app
      APP_PORT: 9000
    restart: always

  frontend-app:
    container_name: opg-digideps-frontend-app
    build:
      context: .
      dockerfile: ./client/docker/app/Dockerfile
      args:
        REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_CLIENT} # set REQUIRE_XDEBUG_CLIENT=1 in .env to install Xdebug
        XDEBUG_IDEKEY_CLIENT: ${XDEBUG_IDEKEY_CLIENT}
    depends_on:
      - api-webserver
      - redis-frontend
      - htmltopdf
      - localstack
      - mock-notify-api
      - pact-mock
      - file-scanner-rest
    environment:
      APP_ENV: ${APP_ENV:-dev}
      APP_DEBUG: ${APP_DEBUG:-0}
    env_file:
      - ./client/app/frontend.env
    restart: always

  admin-webserver:
    container_name: opg-digideps-admin-webserver
    build:
      context: .
      dockerfile: ./client/docker/web/Dockerfile
    ports:
      - 8071:80
    depends_on:
      - admin-app
    environment:
      APP_HOST: admin-app
      APP_PORT: 9000
    restart: always

  admin-app:
    container_name: opg-digideps-admin-app
    build:
      context: .
      dockerfile: ./client/docker/app/Dockerfile
      args:
        REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_CLIENT} # set REQUIRE_XDEBUG_CLIENT=1 in .env to install Xdebug
        XDEBUG_IDEKEY_CLIENT: ${XDEBUG_IDEKEY_CLIENT}
    depends_on:
      - api-webserver
      - redis-frontend
      - htmltopdf
      - localstack
      - mock-notify-api
    environment:
      APP_ENV: ${APP_ENV:-dev}
      APP_DEBUG: ${APP_DEBUG:-0}
    env_file:
      - ./client/app/frontend.env
      - ./client/app/admin.env
    restart: always

  api-webserver:
    container_name: opg-digideps-api-webserver
    build:
      context: .
      dockerfile: ./api/docker/web/Dockerfile
    ports:
      - 8072:80
    depends_on:
      - api-app
    environment:
      APP_HOST: api-app
      APP_PORT: 9000
    restart: always

  api-app:
    container_name: opg-digideps-api-app
    build:
      context: .
      dockerfile: ./api/docker/app/Dockerfile
      args:
        REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_API} # set REQUIRE_XDEBUG_API=1 in .env to install Xdebug
        XDEBUG_IDEKEY_API: ${XDEBUG_IDEKEY_API}
    depends_on:
      - postgres
      - redis-api
      - localstack
    environment:
      APP_ENV: ${APP_ENV:-dev}
      APP_DEBUG: ${APP_DEBUG:-0}
      WORKSPACE: local
    env_file:
      - ./api/app/api.env
      - ./api/app/tests/Behat/test.env
    restart: always

  htmltopdf:
    build:
      context: .
      dockerfile: ./htmltopdf/Dockerfile
    ports:
      - 8080:8080
    restart: always

  postgres:
    container_name: opg-digideps-postgres
    image: postgres:13.11
    ports:
      - 5432:5432
    env_file:
      - ./api/app/postgres.env
    restart: always

  redis-frontend:
    image: redis:6.2.12
    restart: always

  redis-api:
    image: redis:6.2.12
    restart: always

  file-scanner-rest:
    build:
      context: .
      dockerfile: ./file-scanner/Dockerfile
    ports:
      - 8085:8080

  sync:
    build: ./sync
    depends_on:
      - localstack
      - postgres
    env_file:
      - sync/sync.env

  aws:
    image: infrastructureascode/aws-cli
    environment:
      - AWS_ACCESS_KEY_ID=foo
      - AWS_SECRET_ACCESS_KEY=bar
    working_dir: /app
    depends_on:
      - localstack

  localstack:
    build:
      context: .
      dockerfile: local-resources/localstack/Dockerfile
    ports:
      - "4566-4583:4566-4583"
    environment:
      - SERVICES=s3,ssm,logs,secretsmanager,lambda
      - DATA_DIR=/tmp/localstack/data
      - DEFAULT_REGION=eu-west-1
      - USE_SINGLE_REGION=1
      - DEBUG=1
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOVE_CONTAINERS="true"
      - LAMBDA_FORWARD_URL=http://synchronisation:8080

  wait-for-it:
    build: ./wait-for-it

  #    pa11y:
  #        build:
  #            context: ./pa11y
  #        depends_on:
  #            - frontend

  pact-mock:
    image: pactfoundation/pact-cli:0.56.0.6
    ports:
      - 1234:80
    command:
      - mock-service
      - -p
      - "80"
      - --host
      - "0.0.0.0"
      - --pact-dir
      - /tmp/pacts
      - --consumer
      - Complete the deputy report
      - --provider
      - OPG Data

  mock-sirius-integration:
    image: muonsoft/openapi-mock:0.3.9
    ports:
      - 6060:8080
    environment:
      - OPENAPI_MOCK_SPECIFICATION_URL=https://raw.githubusercontent.com/ministryofjustice/opg-data-deputy-reporting/master/lambda_functions/v2/openapi/deputy-reporting-openapi.yml

  mock-notify-api:
    image: stoplight/prism:5.5.2
    ports:
      - 4010:4010
    command:
      - mock
      - /tmp/govuk-notifications.yaml
      - -h
      - 0.0.0.0
      - --dynamic

  synchronisation:
    container_name: opg-synchronisation-lambda
    build:
      context: ./lambdas/functions/synchronisation
    ports:
      - 2080:8080
    environment:
      AWS_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: localstack
      AWS_SECRET_ACCESS_KEY: localstack
      DIGIDEPS_SYNC_ENDPOINT: https://frontend
      SECRETS_PREFIX: local
      LOCALSTACK_ENDPOINT: http://localstack:4566
    entrypoint: /aws-lambda/aws-lambda-rie /var/task/main

  composer:
    image: composer:2.5.8
    command: ["install"]
