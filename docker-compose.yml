version: '3.2'

services:
    router:
        image: jwilder/nginx-proxy
        ports:
            - 443:443
        depends_on:
            - admin
            - localstack
        restart: always
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./.certs:/etc/nginx/certs
            - ./docker/router/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro

    aws:
        image: infrastructureascode/aws-cli
        environment:
            - AWS_ACCESS_KEY_ID=foo
            - AWS_SECRET_ACCESS_KEY=bar
        working_dir: /app
        volumes:
            - .:/app
        depends_on:
            - localstack

    localstack:
        image: localstack/localstack:0.9.1
        ports:
            - 4572:4572
        environment:
            - SERVICES=s3:4572,ssm:4583
            - DATA_DIR=/tmp/localstack/data
            - DEFAULT_REGION=eu-west-1
            - DEBUG=1
        volumes:
            - ./docker/localstack-s3-init.sh:/docker-entrypoint-initaws.d/s3-init.sh

    # Need to populate localstack SSM from PHP to ensure parameters are accessible from client
    # https://github.com/localstack/localstack/issues/1184
    localstack-init:
        build: ./client
        volumes:
            - ./client/scripts:/var/www/scripts
        depends_on:
            - localstack
        command:
            - php
            - scripts/localstack-init.php

    frontend:
        build:
            context: ./client
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_FRONTEND} # set REQUIRE_XDEBUG_FRONTEND=true in .env to install Xdebug
        ports:
            - 8070:443
        depends_on:
            - api
            - redisfront
            - wkhtmltopdf
            - router
            - localstack
        environment:
            VIRTUAL_HOST: www.digideps.local,digideps.local
            VIRTUAL_PROTO: https
            VIRTUAL_PORT: 443
        env_file:
            - ./client/docker/env/frontend.env
        restart: always
        networks:
            default:
                aliases:
                    - www.digideps.local
                    - digideps.local
    admin:
        build:
            context: ./client
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_FRONTEND} # set REQUIRE_XDEBUG_FRONTEND=true in .env to install Xdebug
        ports:
            - 8080:443
        depends_on:
            - api
            - redisadmin
        environment:
            VIRTUAL_HOST: admin.digideps.local
            VIRTUAL_PROTO: https
            VIRTUAL_PORT: 443
        env_file:
            - ./client/docker/env/frontend.env
            - ./client/docker/env/admin.env
        restart: always
        networks:
            default:
                aliases:
                    - admin.digideps.local
    api:
        build:
            context: ./api
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_API} # set REQUIRE_XDEBUG_API=true in .env to install Xdebug
        ports:
            - 8090:443
        depends_on:
            - postgres
            - redisapi
        env_file:
            - ./api/docker/env/api.env
        restart: always

    wkhtmltopdf:
        build: ./wkhtmltopdf
        volumes:
            - ./wkhtmltopdf/app.py:/app.py
        restart: always

    postgres:
        image: postgres:9.6
        ports:
            - 5432:5432
        env_file:
            - ./api/docker/env/postgres.env
        environment:
            # use a different data directory to avoid using the old 9.3 version
            PGDATA: /var/lib/postgresql96/data
        restart: always

    redisfront:
        image: redis:2.8.21
        restart: always

    redisadmin:
        image: redis:2.8.21
        restart: always

    redisapi:
        image: redis:2.8.21
        restart: always

    file-scanner-server:
        image: mkodockx/docker-clamav
        environment:
            CLAMD_CONF_SelfCheck: 0
            FRESHCLAM_CONF_NotifyClamd: 'no'

    file-scanner-rest:
        image: lokori/clamav-rest
        ports:
            - 8085:8080
        environment:
            CLAMD_HOST: file-scanner-server

    sync:
        build: ./sync
        depends_on:
          - localstack
          - postgres
        env_file:
          - sync/sync.env

    pact-mock:
        image: pactfoundation/pact-cli:latest
        ports:
            - 1234:80
        command:
            - mock-service
            - -p
            - "80"
            - --host
            - "0.0.0.0"
            - --pact-dir
            - /tmp/pacts
            - --consumer
            - Complete the deputy report
            - --provider
            - OPG Data
