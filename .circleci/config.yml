version: 2.1

workflows:
  pull_request:
    jobs:
      - lint:
          name: lint terraform
          filters: { branches: { ignore: [ master ] } }

      - build:
          name: build pr
          semver_stage: --stage dev
          filters: { branches: { ignore: [ master ] } }

      - apply:
          name: apply shared-development
          requires: [ build pr, lint terraform ]
          filters: { branches: { ignore: [ master ] } }
          tf_tier: shared
          tf_workspace: development

      - apply:
          name: apply environment
          requires: [ apply shared-development ]
          filters: { branches: { ignore: [ master ] } }

      - stabilize:
          name: stabilize environment
          requires: [ apply environment ]
          filters: { branches: { ignore: [ master ] } }

      - test:
          name: test environment
          requires: [ stabilize environment ]
          filters: { branches: { ignore: [ master ] } }

      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [ test environment ]
          filters: { branches: { ignore: [ master ] } }

      - apply:
          name: destroy environment
          requires: [ approve destroy environment ]
          filters: { branches: { ignore: [ master ] } }
          tf_command: destroy

  master:
    jobs:
      - build:
          name: build master
          filters: { branches: { only: [ master ] } }

      - apply:
          name: apply shared-development
          requires: [ build master ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: development

      - apply:
          name: apply master
          requires: [ apply shared-development ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

      - stabilize:
          name: stabilize master
          requires: [ apply master ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

      - test:
          name: test master
          requires: [ stabilize master ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

      - apply:
          name: apply training
          requires: [ test master ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: training

      - stabilize:
          name: stabilize training
          requires: [ apply training ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: training

      - apply:
          name: apply shared-production
          requires: [ test master ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: production

      - apply:
          name: apply preproduction
          requires: [ apply shared-production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: preprod

      - stabilize:
          name: stabilize preproduction
          requires: [ apply preproduction ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: preprod

      - slack/approval-notification:
          name: approve release to production notification
          message: "Production is ready for release and pending approval"
          requires: [ stabilize preproduction ]
          filters: { branches: { only: [ master ] } }

      - approve:
          name: approve release to production
          type: approval
          requires: [ stabilize preproduction ]
          filters: { branches: { only: [ master ] } }

      - apply:
          name: apply production
          requires: [ approve release to production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: production02

      - stabilize:
          name: stabilize production
          requires: [ apply production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: production02

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  slack: circleci/slack@3.3.0

jobs:
  lint:
    docker:
      - image: hashicorp/terraform:full
    environment:
      TF_CLI_ARGS_plan: -input=false -lock=false
      TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
    steps:
      - checkout
      - run:
          name: terraform lint
          command: terraform fmt -diff -check -recursive

  apply:
    docker:
      - image: hashicorp/terraform:full
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_tier:
        description: tier to alter - shared or environment
        default: environment
        type: string
      tf_command:
        description: terraform command
        default: apply
        type: string
    environment:
      TF_CLI_ARGS_apply: -input=false -auto-approve
      TF_CLI_ARGS_destroy: -input=false -auto-approve
      TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
      TF_TIER: << parameters.tf_tier >>
      WORKSPACE: << parameters.tf_workspace >>
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Initialize
          command: terraform init ${TF_TIER}
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Apply
          command: terraform << parameters.tf_command >> -var-file=${TF_TIER}/terraform.tfvars.json ${TF_TIER}

  test:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    environment:
      TF_VAR_default_role: digideps-ci
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Reset database
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} reset-database-${TF_WORKSPACE}
      - run:
          name: Test API
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-api-${TF_WORKSPACE}
      - run:
          name: Test Client
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-front-${TF_WORKSPACE}

  stabilize:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    environment:
      TF_VAR_default_role: digideps-ci
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Check deployment
          command: ruby deployer/check_deployment.rb scan-${TF_WORKSPACE} front-${TF_WORKSPACE} admin-${TF_WORKSPACE} wkhtmltopdf-${TF_WORKSPACE}

  build:
    docker:
      - image: circleci/python:2.7
    parameters:
      semver_stage:
        description: semver stage suffix
        default: ""
        type: string
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - setup_remote_docker
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - 6f:4b:55:76:0e:cd:27:7d:ad:c3:28:38:53:69:5c:32
      - checkout
      - run:
          name: Install semvertag
          command: sudo pip install https://github.com/ministryofjustice/semvertag/archive/master.zip
      - run:
          name: Current version
          command: semvertag latest << parameters.semver_stage >> >> ~/project/CURRENT
      - run:
          name: Bump version
          command: semvertag bump patch << parameters.semver_stage >> >> ~/project/VERSION
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Show version
          command: echo ${VERSION}
      - run:
          name: Tag git
          command: git tag ${VERSION}
      - run:
          name: Push git tags
          command: git push --tags
      - run:
          name: Docker login
          command: eval $(aws ecr get-login --region $AWS_REGION --no-include-email --profile digideps-ci)
      - run:
          name: Pull images
          command: VERSION=$(cat CURRENT) docker-compose -f docker-compose.ci.yml pull --parallel
      - run:
          name: Build images
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: Push images
          command: docker-compose -f docker-compose.ci.yml push
