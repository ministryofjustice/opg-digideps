# start up the containers
dd-start() {
  docker-compose -f $DD_DOCKER_DIR/docker-compose.yml up -d
}

# run command/bash into container
# e.g. `dd-exec api sh` or `dd-exec frontend ls`
dd-exec() {
  CONTAINER=$1
  shift
  docker-compose -f $DD_DOCKER_DIR/docker-compose.yml exec ${CONTAINER} "$@"
}

# view logs inside container
# e.g. `dd-tail-logs api`
dd-tail-logs() {
  COMPOSE_FILE=$DD_DOCKER_DIR/docker-compose.yml docker-compose logs -f $1
}

# IMPORT Digideps SQL snapshots, dropping the public schema first. e.g. dd-psql-import file.sql
dd-psql-import() {
  dd-exec postgres psql -U api api -c "drop schema public cascade; create schema public;"
  cat $1 | dd-exec postgres psql -q -U api api
  echo Schema recreated. $1 imported correctly into Digideps postgres
  echo Run "dd-psql-import-no-schema-drop scripts/mask.sql" to mask data
  echo Run "dd-exec api scripts/migrate.sh" to migrate data
}

# Import SQL file, without dropping and re-creating the schema
dd-psql-import-no-schema-drop() {
  cat $1 | dd-exec postgres psql -q -U api api
  echo $1 imported correctly into Digideps postgres
  echo Run `dd-exec api app/console doctrine:fixtures:load` to add missing fixtures
}

# EXPORT Digideps SQL snapshots (that include table creation). e.g. dd-psql-export file.sql
dd-psql-export() {
  if [ -f $1 ]; then
    echo "ERROR: file $1 already exists. Did you mean to dd-psql-import that file instead?"
    return 1
  else
    dd-exec postgres pg_dump --clean -U api api > $1
    echo Digideps postgres db exported into $1
    return 0
  fi
}

dd-enable-debug()
{
    containers=(frontend api admin)
    for i in "${containers[@]}"
    do
      APP_ENV=dev APP_DEBUG=1 docker-compose up -d --no-deps $i
      echo "$i: debug mode enabled."
    done
}

dd-disable-debug()
{
    containers=(frontend api admin)
    for i in "${containers[@]}"
    do
       APP_ENV=dev APP_DEBUG=0 docker-compose up -d --no-deps $i
       echo "$i: debug mode disabled."
    done
}

dd-cache-clear()
{
    dd-exec api sh -c "rm -rf var/cache/*"
    dd-exec frontend sh -c "rm -rf var/cache/*"
    dd-exec admin sh -c "rm -rf var/cache/*"
    echo "Cache reset"
}

dd-redis-reset()
{
    dd-exec redis-frontend redis-cli flushall
    dd-exec redis-api redis-cli flushall
    echo "Redis reset"
}

# reset db
dd-db-reset()
{
    dd-exec api sh scripts/reset_db_structure.sh
    dd-exec api sh scripts/reset_db_fixtures.sh
    echo "Db completely recreated with default users"
}

# Run behat tests
#
# Launch all suites (resets redis and DB first):
# dd-behat-run
#
# Lanch specific suite (resets redis and DB first):
# dd-behat-run lay
#
# Launch specific feature in suite (redis and DB untouched):
# dd-behat-run lay path/to/feature.feature
#
# Set the ENV var DD_SKIP_MODE_SWITCH=1 to disable auto switch of PROD/DEV mode
#
dd-behat-run()
{
    dd-disable-debug

    #Â Reset attached resources if doing full run
    if [ "$1" = "" ]; then
      dd-db-reset;
      dd-redis-reset
      dd-cache-clear;
    fi

    time docker-compose -f $DD_DOCKER_DIR/docker-compose.behat.yml run --rm test $@

    # Re-enable dev mode
    dd-enable-debug
}

dd-phpstan() {
  if [ "$1" = "" ]; then
    MERGE_BASE_COMMIT=( $(git merge-base main HEAD) )
    API_CHANGED_FILES=( $(git diff --relative=api --name-only --diff-filter=d $MERGE_BASE_COMMIT | grep .php) ) || [[ $? == 1 ]]
    CLIENT_CHANGED_FILES=( $(git diff --relative=client --name-only --diff-filter=d $MERGE_BASE_COMMIT | grep .php) ) || [[ $? == 1 ]]

    if [ -n "$API_CHANGED_FILES" ]; then
      dd-phpstan api $API_CHANGED_FILES
    fi

    if [ -n "$CLIENT_CHANGED_FILES" ]; then
      dd-phpstan frontend $CLIENT_CHANGED_FILES
    fi
  else
    CONTAINER=$1
    shift
    docker-compose -f $DD_DOCKER_DIR/docker-compose.yml run --rm ${CONTAINER} bin/phpstan analyse $@ --memory-limit=0 --level=max
  fi
}

# phpunit
alias dd-phpunit-frontend="docker-compose -f $DD_DOCKER_DIR/docker-compose.yml run --rm frontend bin/phpunit -c tests/phpunit $@"
alias dd-phpunit-api="docker-compose -f $DD_DOCKER_DIR/docker-compose.yml run --rm api sh scripts/apiunittest.sh"
alias dd-phpunit="dd-phpunit-frontend;dd-phpunit-api"

# phpunit + behat
alias dd-test="dd-phpunit; dd-behat-run"

# postgres shell
alias dd-psql-console="dd-exec postgres psql -U api api"
alias dd-psql-console-test="dd-exec postgres psql -U api digideps_unit_test"
